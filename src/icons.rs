use druid::{kurbo::BezPath, widget::prelude::*, Affine, Color, KeyOrValue, Size, theme};
use crate::IconButton;

//Font Awesome Free 5.2.0 by @fontawesome - https://fontawesome.com

pub static EDIT: SvgIcon = SvgIcon {
    svg_path: "M 442.622 168.074 L 407.054 203.641 C 403.428 207.267 397.565 207.267 393.939 203.641 L 308.3 118.002 C 304.674 114.376 304.674 108.513 308.3 104.886 L 343.867 69.319 C 358.294 54.892 381.749 54.892 396.253 69.319 L 442.622 115.688 C 457.126 130.115 457.126 153.569 442.622 168.074 Z  M 277.748 135.439 L 75.147 338.04 L 58.79 431.779 C 56.553 444.432 67.586 455.388 80.239 453.228 L 173.978 436.794 L 376.579 234.193 C 380.206 230.567 380.206 224.703 376.579 221.077 L 290.941 135.439 C 287.237 131.812 281.374 131.812 277.748 135.439 L 277.748 135.439 Z  M 154.227 320.681 C 149.984 316.437 149.984 309.648 154.227 305.404 L 273.041 186.59 C 277.285 182.347 284.074 182.347 288.318 186.59 C 292.561 190.834 292.561 197.623 288.318 201.866 L 169.503 320.681 C 165.26 324.924 158.471 324.924 154.227 320.681 L 154.227 320.681 Z  M 126.375 385.565 L 163.408 385.565 L 163.408 413.572 L 113.645 422.29 L 89.651 398.295 L 98.369 348.532 L 126.375 348.532 L 126.375 385.565 Z",
    svg_size: Size::new(512.0, 512.0),
    op: PaintOp::Fill,
};

pub static PREFERENCES: SvgIcon = SvgIcon {
    svg_path: "M 392.278 210.429 L 386.462 220.572 C 384.334 224.331 379.794 225.891 375.751 224.402 C 367.382 221.281 359.722 216.812 352.984 211.209 C 349.721 208.514 348.87 203.762 350.998 200.073 L 356.814 189.931 C 351.92 184.257 348.09 177.66 345.536 170.497 L 333.833 170.497 C 329.577 170.497 325.889 167.447 325.18 163.191 C 323.761 154.68 323.69 145.743 325.18 136.877 C 325.889 132.621 329.577 129.5 333.833 129.5 L 345.536 129.5 C 348.09 122.337 351.92 115.74 356.814 110.066 L 350.998 99.924 C 348.87 96.235 349.65 91.483 352.984 88.788 C 359.722 83.185 367.453 78.716 375.751 75.595 C 379.794 74.106 384.334 75.666 386.462 79.425 L 392.278 89.568 C 399.725 88.22 407.314 88.22 414.762 89.568 L 420.578 79.425 C 422.706 75.666 427.245 74.106 431.288 75.595 C 439.657 78.716 447.318 83.185 454.056 88.788 C 457.318 91.483 458.169 96.235 456.042 99.924 L 450.226 110.066 C 455.12 115.74 458.95 122.337 461.503 129.5 L 473.206 129.5 C 477.462 129.5 481.15 132.55 481.859 136.806 C 483.278 145.317 483.349 154.254 481.859 163.12 C 481.15 167.376 477.462 170.497 473.206 170.497 L 461.503 170.497 C 458.95 177.66 455.12 184.257 450.226 189.931 L 456.042 200.073 C 458.169 203.762 457.389 208.514 454.056 211.209 C 447.318 216.812 439.586 221.281 431.288 224.402 C 427.245 225.891 422.706 224.331 420.578 220.572 L 414.762 210.429 C 407.385 211.777 399.725 211.777 392.278 210.429 L 392.278 210.429 Z  M 384.83 168.723 C 412.137 189.718 443.275 158.581 422.28 131.274 C 394.973 110.208 363.836 141.416 384.83 168.723 L 384.83 168.723 Z  M 303.051 277.881 L 326.953 289.797 C 334.117 293.911 337.238 302.635 334.401 310.437 C 328.088 327.602 315.676 343.348 304.185 357.107 C 298.937 363.42 289.858 364.98 282.694 360.867 L 262.054 348.951 C 250.706 358.668 237.513 366.399 223.115 371.435 L 223.115 395.267 C 223.115 403.494 217.228 410.587 209.142 412.006 C 191.694 414.985 173.395 415.126 155.308 412.006 C 147.151 410.587 141.122 403.565 141.122 395.267 L 141.122 371.435 C 126.724 366.328 113.532 358.668 102.183 348.951 L 81.543 360.796 C 74.45 364.91 65.301 363.349 60.052 357.037 C 48.562 343.277 36.433 327.531 30.121 310.437 C 27.283 302.706 30.404 293.982 37.568 289.797 L 61.187 277.881 C 58.421 263.057 58.421 247.808 61.187 232.913 L 37.568 220.926 C 30.404 216.812 27.213 208.088 30.121 200.357 C 36.433 183.193 48.562 167.447 60.052 153.687 C 65.301 147.374 74.379 145.814 81.543 149.928 L 102.183 161.843 C 113.532 152.126 126.724 144.395 141.122 139.359 L 141.122 115.457 C 141.122 107.3 146.939 100.207 155.024 98.789 C 172.473 95.81 190.843 95.668 208.929 98.718 C 217.086 100.136 223.115 107.158 223.115 115.457 L 223.115 139.288 C 237.513 144.395 250.706 152.055 262.054 161.773 L 282.694 149.857 C 289.787 145.743 298.937 147.303 304.185 153.616 C 315.676 167.376 327.733 183.122 334.046 200.286 C 336.883 208.017 334.117 216.741 326.953 220.926 L 303.051 232.842 C 305.817 247.737 305.817 262.986 303.051 277.881 L 303.051 277.881 Z  M 219.639 292.847 C 261.629 238.233 199.283 175.887 144.669 217.876 C 102.68 272.491 165.025 334.836 219.639 292.847 Z  M 392.278 422.432 L 386.462 432.575 C 384.334 436.334 379.794 437.894 375.751 436.405 C 367.382 433.284 359.722 428.815 352.984 423.212 C 349.721 420.517 348.87 415.765 350.998 412.076 L 356.814 401.934 C 351.92 396.26 348.09 389.663 345.536 382.5 L 333.833 382.5 C 329.577 382.5 325.889 379.45 325.18 375.194 C 323.761 366.683 323.69 357.746 325.18 348.88 C 325.889 344.624 329.577 341.503 333.833 341.503 L 345.536 341.503 C 348.09 334.34 351.92 327.743 356.814 322.069 L 350.998 311.927 C 348.87 308.238 349.65 303.486 352.984 300.791 C 359.722 295.188 367.453 290.719 375.751 287.598 C 379.794 286.109 384.334 287.669 386.462 291.428 L 392.278 301.571 C 399.725 300.223 407.314 300.223 414.762 301.571 L 420.578 291.428 C 422.706 287.669 427.245 286.109 431.288 287.598 C 439.657 290.719 447.318 295.188 454.056 300.791 C 457.318 303.486 458.169 308.238 456.042 311.927 L 450.226 322.069 C 455.12 327.743 458.95 334.34 461.503 341.503 L 473.206 341.503 C 477.462 341.503 481.15 344.553 481.859 348.809 C 483.278 357.32 483.349 366.257 481.859 375.123 C 481.15 379.379 477.462 382.5 473.206 382.5 L 461.503 382.5 C 458.95 389.663 455.12 396.26 450.226 401.934 L 456.042 412.076 C 458.169 415.765 457.389 420.517 454.056 423.212 C 447.318 428.815 439.586 433.284 431.288 436.405 C 427.245 437.894 422.706 436.334 420.578 432.575 L 414.762 422.432 C 407.385 423.78 399.725 423.78 392.278 422.432 Z  M 384.83 380.655 C 412.137 401.65 443.275 370.513 422.28 343.206 C 394.973 322.211 363.836 353.348 384.83 380.655 L 384.83 380.655 Z", svg_size: Size::new(512.0, 512.0),
    op: PaintOp::Fill,
};


#[derive(Copy, Clone)]
pub enum PaintOp {
    Fill,
}

#[derive(Clone)]
pub struct SvgIcon {
    svg_path: &'static str,
    svg_size: Size,
    op: PaintOp,
}

#[derive(Clone)]
pub struct Icon {
    op: PaintOp,
    bez_path: BezPath,
    base_size: Size,
    size: Size,
    color: KeyOrValue<Color>,
}

impl From<&SvgIcon> for Icon {
    fn from(svg: &SvgIcon) -> Self {
        let bez_path = BezPath::from_svg(svg.svg_path).expect("Failed to parse SVG");
        Icon {
            op: svg.op,
            bez_path,
            base_size: svg.svg_size,
            size: Size::ZERO,
            color: theme::LABEL_COLOR.into(),
        }
    }
}

impl Icon {

    pub fn with_color(mut self, color: impl Into<KeyOrValue<Color>>) -> Self {
        self.set_color(color);
        self
    }

    pub fn set_color(&mut self, color: impl Into<KeyOrValue<Color>>) {
        self.color = color.into();
    }
}

impl<T> Widget<T> for Icon {
    fn event(&mut self, _ctx: &mut EventCtx, _ev: &Event, _data: &mut T, _env: &Env) {}

    fn lifecycle(&mut self, _ctx: &mut LifeCycleCtx, _ev: &LifeCycle, _data: &T, _env: &Env) {}

    fn update(&mut self, _ctx: &mut UpdateCtx, _old_data: &T, _data: &T, _env: &Env) {}

    fn layout(&mut self, _ctx: &mut LayoutCtx, bc: &BoxConstraints, _data: &T, _env: &Env) -> Size {
        self.size = bc.max();
        bc.constrain(self.size)
    }

    fn paint(&mut self, ctx: &mut PaintCtx, _data: &T, env: &Env) {
        let color = self.color.resolve(env);
        ctx.with_save(|ctx| {
            ctx.transform(Affine::scale_non_uniform(
                self.size.width  / self.base_size.width,
                self.size.height / self.base_size.height,
            ));
            match self.op {
                PaintOp::Fill => ctx.fill(&self.bez_path, &color),
            }
        });
    }
}